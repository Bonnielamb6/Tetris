package org.example;

import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

class BoardTest {

    private final Board boardToTest;
    private final char[][] emptyBoard;
    private final int ROWS = 20;
    private final int COLS = 10;

    public BoardTest(){
        boardToTest = new Board(ROWS,COLS);
        emptyBoard = new char[][]{
                {'-','-','-','-','-','-','-','-','-','-'},
                {'-','-','-','-','-','-','-','-','-','-'},
                {'-','-','-','-','-','-','-','-','-','-'},
                {'-','-','-','-','-','-','-','-','-','-'},
                {'-','-','-','-','-','-','-','-','-','-'},
                {'-','-','-','-','-','-','-','-','-','-'},
                {'-','-','-','-','-','-','-','-','-','-'},
                {'-','-','-','-','-','-','-','-','-','-'},
                {'-','-','-','-','-','-','-','-','-','-'},
                {'-','-','-','-','-','-','-','-','-','-'},
                {'-','-','-','-','-','-','-','-','-','-'},
                {'-','-','-','-','-','-','-','-','-','-'},
                {'-','-','-','-','-','-','-','-','-','-'},
                {'-','-','-','-','-','-','-','-','-','-'},
                {'-','-','-','-','-','-','-','-','-','-'},
                {'-','-','-','-','-','-','-','-','-','-'},
                {'-','-','-','-','-','-','-','-','-','-'},
                {'-','-','-','-','-','-','-','-','-','-'},
                {'-','-','-','-','-','-','-','-','-','-'},
                {'-','-','-','-','-','-','-','-','-','-'}
        };
    }

    @Test
    void saveBoard() {
        assertArrayEquals(emptyBoard,boardToTest.getBoard());
        char[][] inputBoard = new char[][]{
                {'-','-','-','-','0','-','-','-','-','-'},
                {'-','-','-','-','0','-','-','-','-','-'},
                {'-','-','-','-','0','-','-','-','-','-'},
                {'-','-','-','-','0','-','-','-','-','-'},
                {'-','-','-','-','0','-','-','-','-','-'},
                {'-','-','-','-','0','-','-','-','-','-'},
                {'-','-','-','-','0','-','-','-','-','-'},
                {'-','-','-','-','0','-','-','-','-','-'},
                {'-','-','-','-','0','-','-','-','-','-'},
                {'-','-','-','-','0','-','-','-','-','-'},
                {'-','-','-','-','0','-','-','-','-','-'},
                {'-','-','-','-','0','-','-','-','-','-'},
                {'-','-','-','-','0','-','-','-','-','-'},
                {'-','-','-','-','0','-','-','-','-','-'},
                {'-','-','-','-','0','-','-','-','-','-'},
                {'-','-','-','-','0','-','-','-','-','-'},
                {'-','-','-','-','0','-','-','-','-','-'},
                {'-','-','-','-','0','-','-','-','-','-'},
                {'-','-','-','-','0','-','-','-','-','-'},
                {'-','-','-','-','0','-','-','-','-','-'}
        };
        boardToTest.saveBoard(inputBoard);
        assertArrayEquals(inputBoard, boardToTest.getBoard());
    }

    @Test
    void getBoard() {
        assertArrayEquals(emptyBoard,boardToTest.getBoard());
    }

    @Test
    void breakPieces() {
        char[][] expectedBefore = new char[][]{
                {'-','-','-','-','-','-','-','-','-','-'},
                {'-','-','-','-','-','-','-','-','-','-'},
                {'-','-','-','-','-','-','-','-','-','-'},
                {'-','-','-','-','-','-','-','-','-','-'},
                {'-','-','-','-','-','-','-','-','-','-'},
                {'-','-','-','-','-','-','-','-','-','-'},
                {'-','-','-','-','-','-','-','-','-','-'},
                {'-','-','-','-','-','-','-','-','-','-'},
                {'-','-','-','-','-','-','-','-','-','-'},
                {'-','-','-','-','-','-','-','-','-','-'},
                {'-','-','-','-','-','-','-','-','-','-'},
                {'-','-','-','-','-','-','-','-','-','-'},
                {'-','-','-','-','-','-','-','-','-','-'},
                {'-','-','-','-','-','-','-','-','-','-'},
                {'-','-','-','-','-','-','-','-','-','-'},
                {'-','-','-','-','-','0','-','-','-','-'},
                {'-','-','-','-','0','0','-','-','-','-'},
                {'-','-','-','-','0','0','-','-','-','-'},
                {'-','-','-','0','0','0','-','-','-','-'},
                {'0','0','0','0','0','0','0','0','0','0'}
        };
        boardToTest.saveBoard(expectedBefore);
        assertArrayEquals(expectedBefore, boardToTest.getBoard());
        boardToTest.breakPieces();
        char[][] expectedAfter = new char[][]{
                {'-','-','-','-','-','-','-','-','-','-'},
                {'-','-','-','-','-','-','-','-','-','-'},
                {'-','-','-','-','-','-','-','-','-','-'},
                {'-','-','-','-','-','-','-','-','-','-'},
                {'-','-','-','-','-','-','-','-','-','-'},
                {'-','-','-','-','-','-','-','-','-','-'},
                {'-','-','-','-','-','-','-','-','-','-'},
                {'-','-','-','-','-','-','-','-','-','-'},
                {'-','-','-','-','-','-','-','-','-','-'},
                {'-','-','-','-','-','-','-','-','-','-'},
                {'-','-','-','-','-','-','-','-','-','-'},
                {'-','-','-','-','-','-','-','-','-','-'},
                {'-','-','-','-','-','-','-','-','-','-'},
                {'-','-','-','-','-','-','-','-','-','-'},
                {'-','-','-','-','-','-','-','-','-','-'},
                {'-','-','-','-','-','-','-','-','-','-'},
                {'-','-','-','-','-','0','-','-','-','-'},
                {'-','-','-','-','0','0','-','-','-','-'},
                {'-','-','-','-','0','0','-','-','-','-'},
                {'-','-','-','0','0','0','-','-','-','-'}
        };
        assertArrayEquals(expectedAfter, boardToTest.getBoard());
    }

    @Test
    void isOnTop() {
        assertFalse(boardToTest.isOnTop());
    }

    @Test
    void getRows() {
        assertEquals(ROWS, boardToTest.getRows());
    }

    @Test
    void getCols() {
        assertEquals(COLS, boardToTest.getCols());
    }
}